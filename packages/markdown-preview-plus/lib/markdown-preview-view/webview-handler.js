"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const electron_1 = require("electron");
const fileUriToPath = require("file-uri-to-path");
const util_1 = require("../util");
const util_2 = require("./util");
class WebviewHandler {
    constructor(init) {
        this.emitter = new atom_1.Emitter();
        this.disposables = new atom_1.CompositeDisposable();
        this.destroyed = false;
        this.zoomLevel = 0;
        this.replyCallbacks = new Map();
        this.replyCallbackId = 0;
        this._element = document.createElement('webview');
        this._element.classList.add('markdown-preview-plus', 'native-key-bindings');
        this._element.disablewebsecurity = 'true';
        this._element.nodeintegration = 'true';
        this._element.src = `file:///${__dirname}/../../client/template.html`;
        this._element.style.width = '100%';
        this._element.style.height = '100%';
        this._element.addEventListener('ipc-message', (e) => {
            switch (e.channel) {
                case 'zoom-in':
                    this.zoomIn();
                    break;
                case 'zoom-out':
                    this.zoomOut();
                    break;
                case 'did-scroll-preview':
                    this.emitter.emit('did-scroll-preview', e.args[0]);
                    break;
                case 'uncaught-error': {
                    const err = e.args[0];
                    const newErr = new Error();
                    atom.notifications.addFatalError(`Uncaught error ${err.name} in markdown-preview-plus webview client`, {
                        dismissable: true,
                        stack: newErr.stack,
                        detail: `${err.message}\n\nstack:\n${err.stack}`,
                    });
                    break;
                }
                case 'request-reply': {
                    const { id, request, result } = e.args[0];
                    const cb = this.replyCallbacks.get(id);
                    if (cb && request === cb.request) {
                        const callback = cb.callback;
                        callback(result);
                    }
                    break;
                }
            }
        });
        this._element.addEventListener('will-navigate', async (e) => {
            const exts = util_1.atomConfig().previewConfig.shellOpenFileExtensions;
            const forceOpenExternal = exts.some((ext) => e.url.toLowerCase().endsWith(`.${ext.toLowerCase()}`));
            if (e.url.startsWith('file://') && !forceOpenExternal) {
                util_1.handlePromise(atom.workspace.open(fileUriToPath(e.url)));
            }
            else {
                electron_1.shell.openExternal(e.url);
            }
        });
        this.disposables.add(atom.styles.onDidAddStyleElement(() => {
            this.updateStyles();
        }), atom.styles.onDidRemoveStyleElement(() => {
            this.updateStyles();
        }), atom.styles.onDidUpdateStyleElement(() => {
            this.updateStyles();
        }));
        const onload = () => {
            if (this.destroyed)
                return;
            this._element.setZoomLevel(this.zoomLevel);
            this.updateStyles();
            init();
        };
        this._element.addEventListener('dom-ready', onload);
    }
    get element() {
        return this._element;
    }
    async runJS(js) {
        return new Promise((resolve) => this._element.executeJavaScript(js, false, resolve));
    }
    destroy() {
        if (this.destroyed)
            return;
        this.destroyed = true;
        this.disposables.dispose();
        this._element.remove();
    }
    async update(html, renderLaTeX) {
        if (this.destroyed)
            return undefined;
        return this.runRequest('update-preview', {
            html,
            renderLaTeX,
        });
    }
    setSourceMap(map) {
        this._element.send('set-source-map', { map });
    }
    setBasePath(path) {
        this._element.send('set-base-path', { path });
    }
    init(params) {
        this._element.send('init', params);
    }
    updateImages(oldSource, version) {
        this._element.send('update-images', {
            oldsrc: oldSource,
            v: version,
        });
    }
    async printToPDF(opts) {
        return new Promise((resolve, reject) => {
            this._element.printToPDF(opts, (error, data) => {
                if (error) {
                    reject(error);
                    return;
                }
                resolve(data);
            });
        });
    }
    sync(line, flash) {
        this._element.send('sync', { line, flash });
    }
    async syncSource() {
        return this.runRequest('sync-source', {});
    }
    scrollSync(firstLine, lastLine) {
        this._element.send('scroll-sync', { firstLine, lastLine });
    }
    zoomIn() {
        this.zoomLevel += 0.1;
        this._element.setZoomLevel(this.zoomLevel);
    }
    zoomOut() {
        this.zoomLevel -= 0.1;
        this._element.setZoomLevel(this.zoomLevel);
    }
    resetZoom() {
        this.zoomLevel = 0;
        this._element.setZoomLevel(this.zoomLevel);
    }
    print() {
        this._element.print();
    }
    openDevTools() {
        this._element.openDevTools();
    }
    async reload() {
        await this.runRequest('reload', {});
        this._element.reload();
    }
    error(msg) {
        this._element.send('error', { msg });
    }
    async getTeXConfig() {
        return this.runRequest('get-tex-config', {});
    }
    async getSelection() {
        return this.runRequest('get-selection', {});
    }
    updateStyles() {
        this._element.send('style', { styles: util_2.getPreviewStyles(true) });
    }
    async runRequest(request, args) {
        const id = this.replyCallbackId++;
        return new Promise((resolve) => {
            this.replyCallbacks.set(id, {
                request: request,
                callback: (result) => {
                    this.replyCallbacks.delete(id);
                    resolve(result);
                },
            });
            const newargs = Object.assign({ id }, args);
            this._element.send(request, newargs);
        });
    }
}
exports.WebviewHandler = WebviewHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vidmlldy1oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21hcmtkb3duLXByZXZpZXctdmlldy93ZWJ2aWV3LWhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBbUQ7QUFDbkQsdUNBQTRDO0FBQzVDLGtEQUFrRDtBQUVsRCxrQ0FBbUQ7QUFFbkQsaUNBQXlDO0FBMkN6QyxNQUFhLGNBQWM7SUFjekIsWUFBWSxJQUFnQjtRQWJaLFlBQU8sR0FBRyxJQUFJLGNBQU8sRUFLbEMsQ0FBQTtRQUNPLGdCQUFXLEdBQUcsSUFBSSwwQkFBbUIsRUFBRSxDQUFBO1FBRXpDLGNBQVMsR0FBRyxLQUFLLENBQUE7UUFDakIsY0FBUyxHQUFHLENBQUMsQ0FBQTtRQUNiLG1CQUFjLEdBQUcsSUFBSSxHQUFHLEVBQStCLENBQUE7UUFDdkQsb0JBQWUsR0FBRyxDQUFDLENBQUE7UUFHekIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ2pELElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsRUFBRSxxQkFBcUIsQ0FBQyxDQUFBO1FBQzNFLElBQUksQ0FBQyxRQUFRLENBQUMsa0JBQWtCLEdBQUcsTUFBTSxDQUFBO1FBQ3pDLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxHQUFHLE1BQU0sQ0FBQTtRQUN0QyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxXQUFXLFNBQVMsNkJBQTZCLENBQUE7UUFDckUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQTtRQUNsQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBO1FBQ25DLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQzVCLGFBQWEsRUFDYixDQUFDLENBQWlDLEVBQUUs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WUFBWTtRQUN2QixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDOUMsQ0FBQztJQUVNLEtBQUssQ0FBQyxZQUFZO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDN0MsQ0FBQztJQUVNLFlBQVk7UUFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQVUsT0FBTyxFQUFFLEVBQUUsTUFBTSxFQUFFLHVCQUFnQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMxRSxDQUFDO0lBRVMsS0FBSyxDQUFDLFVBQVUsQ0FDeEIsT0FBVSxFQUNWLElBQXFFO1FBRXJFLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQTtRQUNqQyxPQUFPLElBQUksT0FBTyxDQUFxQixDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ2pELElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRztnQkFDM0IsT0FBTyxFQUFFLE9BQU87Z0JBQ2hCLFFBQVEsRUFBRSxDQUFDLE1BQTBCLEVBQUUsRUFBRTtvQkFDdkMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUE7b0JBQzlCLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQTtnQkFDakIsQ0FBQzthQUNvQyxDQUFDLENBQUE7WUFDeEMsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFBO1lBQzNDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFJLE9BQU8sRUFBRSxPQUF3QixDQUFDLENBQUE7UUFDMUQsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDO0NBQ0Y7QUFsT0Qsd0NBa09DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRW1pdHRlciwgQ29tcG9zaXRlRGlzcG9zYWJsZSB9IGZyb20gJ2F0b20nXG5pbXBvcnQgeyBXZWJ2aWV3VGFnLCBzaGVsbCB9IGZyb20gJ2VsZWN0cm9uJ1xuaW1wb3J0IGZpbGVVcmlUb1BhdGggPSByZXF1aXJlKCdmaWxlLXVyaS10by1wYXRoJylcblxuaW1wb3J0IHsgaGFuZGxlUHJvbWlzZSwgYXRvbUNvbmZpZyB9IGZyb20gJy4uL3V0aWwnXG5pbXBvcnQgeyBSZXF1ZXN0UmVwbHlNYXAsIENoYW5uZWxNYXAgfSBmcm9tICcuLi8uLi9zcmMtY2xpZW50L2lwYydcbmltcG9ydCB7IGdldFByZXZpZXdTdHlsZXMgfSBmcm9tICcuL3V0aWwnXG5cbmV4cG9ydCB0eXBlIFJlcGx5Q2FsbGJhY2tTdHJ1Y3Q8XG4gIFQgZXh0ZW5kcyBrZXlvZiBSZXF1ZXN0UmVwbHlNYXAgPSBrZXlvZiBSZXF1ZXN0UmVwbHlNYXBcbj4gPSB7XG4gIFtLIGluIGtleW9mIFJlcXVlc3RSZXBseU1hcF06IHtcbiAgICByZXF1ZXN0OiBLXG4gICAgY2FsbGJhY2s6IChyZXBseTogUmVxdWVzdFJlcGx5TWFwW0tdKSA9PiB2b2lkXG4gIH1cbn1bVF1cblxuaW50ZXJmYWNlIFByaW50VG9QREZPcHRpb25zUmVhbCB7XG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIHR5cGUgb2YgbWFyZ2lucyB0byB1c2UuIFVzZXMgMCBmb3IgZGVmYXVsdCBtYXJnaW4sIDEgZm9yIG5vXG4gICAqIG1hcmdpbiwgYW5kIDIgZm9yIG1pbmltdW0gbWFyZ2luLlxuICAgKi9cbiAgbWFyZ2luc1R5cGU/OiBudW1iZXJcbiAgLyoqXG4gICAqIFNwZWNpZnkgcGFnZSBzaXplIG9mIHRoZSBnZW5lcmF0ZWQgUERGLiBDYW4gYmUgQTMsIEE0LCBBNSwgTGVnYWwsIExldHRlcixcbiAgICogVGFibG9pZCBvciBhbiBPYmplY3QgY29udGFpbmluZyBoZWlnaHQgYW5kIHdpZHRoIGluIG1pY3JvbnMuXG4gICAqL1xuICBwYWdlU2l6ZT86XG4gICAgfCB7IHdpZHRoOiBudW1iZXI7IGhlaWdodDogbnVtYmVyIH1cbiAgICB8ICdBMydcbiAgICB8ICdBNCdcbiAgICB8ICdBNSdcbiAgICB8ICdMZWdhbCdcbiAgICB8ICdMZXR0ZXInXG4gICAgfCAnVGFibG9pZCdcbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gcHJpbnQgQ1NTIGJhY2tncm91bmRzLlxuICAgKi9cbiAgcHJpbnRCYWNrZ3JvdW5kPzogYm9vbGVhblxuICAvKipcbiAgICogV2hldGhlciB0byBwcmludCBzZWxlY3Rpb24gb25seS5cbiAgICovXG4gIHByaW50U2VsZWN0aW9uT25seT86IGJvb2xlYW5cbiAgLyoqXG4gICAqIHRydWUgZm9yIGxhbmRzY2FwZSwgZmFsc2UgZm9yIHBvcnRyYWl0LlxuICAgKi9cbiAgbGFuZHNjYXBlPzogYm9vbGVhblxufVxuXG5leHBvcnQgY2xhc3MgV2Vidmlld0hhbmRsZXIge1xuICBwdWJsaWMgcmVhZG9ubHkgZW1pdHRlciA9IG5ldyBFbWl0dGVyPFxuICAgIHt9LFxuICAgIHtcbiAgICAgICdkaWQtc2Nyb2xsLXByZXZpZXcnOiB7IG1pbjogbnVtYmVyOyBtYXg6IG51bWJlciB9XG4gICAgfVxuICA+KClcbiAgcHJvdGVjdGVkIGRpc3Bvc2FibGVzID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuICBwcml2YXRlIHJlYWRvbmx5IF9lbGVtZW50OiBXZWJ2aWV3VGFnXG4gIHByaXZhdGUgZGVzdHJveWVkID0gZmFsc2VcbiAgcHJpdmF0ZSB6b29tTGV2ZWwgPSAwXG4gIHByaXZhdGUgcmVwbHlDYWxsYmFja3MgPSBuZXcgTWFwPG51bWJlciwgUmVwbHlDYWxsYmFja1N0cnVjdD4oKVxuICBwcml2YXRlIHJlcGx5Q2FsbGJhY2tJZCA9IDBcblxuICBjb25zdHJ1Y3Rvcihpbml0OiAoKSA9PiB2b2lkKSB7XG4gICAgdGhpcy5fZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3dlYnZpZXcnKVxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZCgnbWFya2Rvd24tcHJldmlldy1wbHVzJywgJ25hdGl2ZS1rZXktYmluZGluZ3MnKVxuICAgIHRoaXMuX2VsZW1lbnQuZGlzYWJsZXdlYnNlY3VyaXR5ID0gJ3RydWUnXG4gICAgdGhpcy5fZWxlbWVudC5ub2RlaW50ZWdyYXRpb24gPSAndHJ1ZSdcbiAgICB0aGlzLl9lbGVtZW50LnNyYyA9IGBmaWxlOi8vLyR7X19kaXJuYW1lfS8uLi8uLi9jbGllbnQvdGVtcGxhdGUuaHRtbGBcbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlLndpZHRoID0gJzEwMCUnXG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZS5oZWlnaHQgPSAnMTAwJSdcbiAgICB0aGlzLl9lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAnaXBjLW1lc3NhZ2UnLFxuICAgICAgKGU6IEVsZWN0cm9uLklwY01lc3NhZ2VFdmVudEN1c3RvbSkgPT4ge1xuICAgICAgICBzd2l0Y2ggKGUuY2hhbm5lbCkge1xuICAgICAgICAgIGNhc2UgJ3pvb20taW4nOlxuICAgICAgICAgICAgdGhpcy56b29tSW4oKVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBjYXNlICd6b29tLW91dCc6XG4gICAgICAgICAgICB0aGlzLnpvb21PdXQoKVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBjYXNlICdkaWQtc2Nyb2xsLXByZXZpZXcnOlxuICAgICAgICAgICAgdGhpcy5lbWl0dGVyLmVtaXQoJ2RpZC1zY3JvbGwtcHJldmlldycsIGUuYXJnc1swXSlcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgY2FzZSAndW5jYXVnaHQtZXJyb3InOiB7XG4gICAgICAgICAgICBjb25zdCBlcnIgPSBlLmFyZ3NbMF1cbiAgICAgICAgICAgIGNvbnN0IG5ld0VyciA9IG5ldyBFcnJvcigpXG4gICAgICAgICAgICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkRmF0YWxFcnJvcihcbiAgICAgICAgICAgICAgYFVuY2F1Z2h0IGVycm9yICR7ZXJyLm5hbWV9IGluIG1hcmtkb3duLXByZXZpZXctcGx1cyB3ZWJ2aWV3IGNsaWVudGAsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBkaXNtaXNzYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzdGFjazogbmV3RXJyLnN0YWNrLFxuICAgICAgICAgICAgICAgIGRldGFpbDogYCR7ZXJyLm1lc3NhZ2V9XFxuXFxuc3RhY2s6XFxuJHtlcnIuc3RhY2t9YCxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIHJlcGxpZXNcbiAgICAgICAgICBjYXNlICdyZXF1ZXN0LXJlcGx5Jzoge1xuICAgICAgICAgICAgY29uc3QgeyBpZCwgcmVxdWVzdCwgcmVzdWx0IH0gPSBlLmFyZ3NbMF1cbiAgICAgICAgICAgIGNvbnN0IGNiID0gdGhpcy5yZXBseUNhbGxiYWNrcy5nZXQoaWQpXG4gICAgICAgICAgICBpZiAoY2IgJiYgcmVxdWVzdCA9PT0gY2IucmVxdWVzdCkge1xuICAgICAgICAgICAgICBjb25zdCBjYWxsYmFjazogKHI6IGFueSkgPT4gdm9pZCA9IGNiLmNhbGxiYWNrXG4gICAgICAgICAgICAgIGNhbGxiYWNrKHJlc3VsdClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgIClcbiAgICB0aGlzLl9lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3dpbGwtbmF2aWdhdGUnLCBhc3luYyAoZSkgPT4ge1xuICAgICAgY29uc3QgZXh0cyA9IGF0b21Db25maWcoKS5wcmV2aWV3Q29uZmlnLnNoZWxsT3BlbkZpbGVFeHRlbnNpb25zXG4gICAgICBjb25zdCBmb3JjZU9wZW5FeHRlcm5hbCA9IGV4dHMuc29tZSgoZXh0KSA9PlxuICAgICAgICBlLnVybC50b0xvd2VyQ2FzZSgpLmVuZHNXaXRoKGAuJHtleHQudG9Mb3dlckNhc2UoKX1gKSxcbiAgICAgIClcbiAgICAgIGlmIChlLnVybC5zdGFydHNXaXRoKCdmaWxlOi8vJykgJiYgIWZvcmNlT3BlbkV4dGVybmFsKSB7XG4gICAgICAgIGhhbmRsZVByb21pc2UoYXRvbS53b3Jrc3BhY2Uub3BlbihmaWxlVXJpVG9QYXRoKGUudXJsKSkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaGVsbC5vcGVuRXh0ZXJuYWwoZS51cmwpXG4gICAgICB9XG4gICAgfSlcblxuICAgIHRoaXMuZGlzcG9zYWJsZXMuYWRkKFxuICAgICAgYXRvbS5zdHlsZXMub25EaWRBZGRTdHlsZUVsZW1lbnQoKCkgPT4ge1xuICAgICAgICB0aGlzLnVwZGF0ZVN0eWxlcygpXG4gICAgICB9KSxcbiAgICAgIGF0b20uc3R5bGVzLm9uRGlkUmVtb3ZlU3R5bGVFbGVtZW50KCgpID0+IHtcbiAgICAgICAgdGhpcy51cGRhdGVTdHlsZXMoKVxuICAgICAgfSksXG4gICAgICBhdG9tLnN0eWxlcy5vbkRpZFVwZGF0ZVN0eWxlRWxlbWVudCgoKSA9PiB7XG4gICAgICAgIHRoaXMudXBkYXRlU3R5bGVzKClcbiAgICAgIH0pLFxuICAgIClcblxuICAgIGNvbnN0IG9ubG9hZCA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLmRlc3Ryb3llZCkgcmV0dXJuXG4gICAgICB0aGlzLl9lbGVtZW50LnNldFpvb21MZXZlbCh0aGlzLnpvb21MZXZlbClcbiAgICAgIHRoaXMudXBkYXRlU3R5bGVzKClcbiAgICAgIGluaXQoKVxuICAgIH1cbiAgICB0aGlzLl9lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RvbS1yZWFkeScsIG9ubG9hZClcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZWxlbWVudCgpOiBIVE1MRWxlbWVudCB7XG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnRcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBydW5KUzxUPihqczogc3RyaW5nKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPFQ+KChyZXNvbHZlKSA9PlxuICAgICAgdGhpcy5fZWxlbWVudC5leGVjdXRlSmF2YVNjcmlwdChqcywgZmFsc2UsIHJlc29sdmUpLFxuICAgIClcbiAgfVxuXG4gIHB1YmxpYyBkZXN0cm95KCkge1xuICAgIGlmICh0aGlzLmRlc3Ryb3llZCkgcmV0dXJuXG4gICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlXG4gICAgdGhpcy5kaXNwb3NhYmxlcy5kaXNwb3NlKClcbiAgICB0aGlzLl9lbGVtZW50LnJlbW92ZSgpXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgdXBkYXRlKGh0bWw6IHN0cmluZywgcmVuZGVyTGFUZVg6IGJvb2xlYW4pIHtcbiAgICBpZiAodGhpcy5kZXN0cm95ZWQpIHJldHVybiB1bmRlZmluZWRcbiAgICByZXR1cm4gdGhpcy5ydW5SZXF1ZXN0KCd1cGRhdGUtcHJldmlldycsIHtcbiAgICAgIGh0bWwsXG4gICAgICByZW5kZXJMYVRlWCxcbiAgICB9KVxuICB9XG5cbiAgcHVibGljIHNldFNvdXJjZU1hcChtYXA6IHtcbiAgICBbbGluZTogbnVtYmVyXTogeyB0YWc6IHN0cmluZzsgaW5kZXg6IG51bWJlciB9W11cbiAgfSkge1xuICAgIHRoaXMuX2VsZW1lbnQuc2VuZDwnc2V0LXNvdXJjZS1tYXAnPignc2V0LXNvdXJjZS1tYXAnLCB7IG1hcCB9KVxuICB9XG5cbiAgcHVibGljIHNldEJhc2VQYXRoKHBhdGg/OiBzdHJpbmcpIHtcbiAgICB0aGlzLl9lbGVtZW50LnNlbmQ8J3NldC1iYXNlLXBhdGgnPignc2V0LWJhc2UtcGF0aCcsIHsgcGF0aCB9KVxuICB9XG5cbiAgcHVibGljIGluaXQocGFyYW1zOiBDaGFubmVsTWFwWydpbml0J10pIHtcbiAgICB0aGlzLl9lbGVtZW50LnNlbmQ8J2luaXQnPignaW5pdCcsIHBhcmFtcylcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGVJbWFnZXMob2xkU291cmNlOiBzdHJpbmcsIHZlcnNpb246IG51bWJlciB8IHVuZGVmaW5lZCkge1xuICAgIHRoaXMuX2VsZW1lbnQuc2VuZDwndXBkYXRlLWltYWdlcyc+KCd1cGRhdGUtaW1hZ2VzJywge1xuICAgICAgb2xkc3JjOiBvbGRTb3VyY2UsXG4gICAgICB2OiB2ZXJzaW9uLFxuICAgIH0pXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgcHJpbnRUb1BERihvcHRzOiBQcmludFRvUERGT3B0aW9uc1JlYWwpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8QnVmZmVyPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAvLyBUT0RPOiBDb21wbGFpbiBvbiBFbGVjdHJvblxuICAgICAgdGhpcy5fZWxlbWVudC5wcmludFRvUERGKG9wdHMgYXMgYW55LCAoZXJyb3IsIGRhdGEpID0+IHtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgcmVqZWN0KGVycm9yKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIHJlc29sdmUoZGF0YSlcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIHB1YmxpYyBzeW5jKGxpbmU6IG51bWJlciwgZmxhc2g6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9lbGVtZW50LnNlbmQ8J3N5bmMnPignc3luYycsIHsgbGluZSwgZmxhc2ggfSlcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzeW5jU291cmNlKCkge1xuICAgIHJldHVybiB0aGlzLnJ1blJlcXVlc3QoJ3N5bmMtc291cmNlJywge30pXG4gIH1cblxuICBwdWJsaWMgc2Nyb2xsU3luYyhmaXJzdExpbmU6IG51bWJlciwgbGFzdExpbmU6IG51bWJlcikge1xuICAgIHRoaXMuX2VsZW1lbnQuc2VuZDwnc2Nyb2xsLXN5bmMnPignc2Nyb2xsLXN5bmMnLCB7IGZpcnN0TGluZSwgbGFzdExpbmUgfSlcbiAgfVxuXG4gIHB1YmxpYyB6b29tSW4oKSB7XG4gICAgdGhpcy56b29tTGV2ZWwgKz0gMC4xXG4gICAgdGhpcy5fZWxlbWVudC5zZXRab29tTGV2ZWwodGhpcy56b29tTGV2ZWwpXG4gIH1cblxuICBwdWJsaWMgem9vbU91dCgpIHtcbiAgICB0aGlzLnpvb21MZXZlbCAtPSAwLjFcbiAgICB0aGlzLl9lbGVtZW50LnNldFpvb21MZXZlbCh0aGlzLnpvb21MZXZlbClcbiAgfVxuXG4gIHB1YmxpYyByZXNldFpvb20oKSB7XG4gICAgdGhpcy56b29tTGV2ZWwgPSAwXG4gICAgdGhpcy5fZWxlbWVudC5zZXRab29tTGV2ZWwodGhpcy56b29tTGV2ZWwpXG4gIH1cblxuICBwdWJsaWMgcHJpbnQoKSB7XG4gICAgdGhpcy5fZWxlbWVudC5wcmludCgpXG4gIH1cblxuICBwdWJsaWMgb3BlbkRldlRvb2xzKCkge1xuICAgIHRoaXMuX2VsZW1lbnQub3BlbkRldlRvb2xzKClcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyByZWxvYWQoKSB7XG4gICAgYXdhaXQgdGhpcy5ydW5SZXF1ZXN0KCdyZWxvYWQnLCB7fSlcbiAgICB0aGlzLl9lbGVtZW50LnJlbG9hZCgpXG4gIH1cblxuICBwdWJsaWMgZXJyb3IobXNnOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9lbGVtZW50LnNlbmQ8J2Vycm9yJz4oJ2Vycm9yJywgeyBtc2cgfSlcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXRUZVhDb25maWcoKSB7XG4gICAgcmV0dXJuIHRoaXMucnVuUmVxdWVzdCgnZ2V0LXRleC1jb25maWcnLCB7fSlcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXRTZWxlY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucnVuUmVxdWVzdCgnZ2V0LXNlbGVjdGlvbicsIHt9KVxuICB9XG5cbiAgcHVibGljIHVwZGF0ZVN0eWxlcygpIHtcbiAgICB0aGlzLl9lbGVtZW50LnNlbmQ8J3N0eWxlJz4oJ3N0eWxlJywgeyBzdHlsZXM6IGdldFByZXZpZXdTdHlsZXModHJ1ZSkgfSlcbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBydW5SZXF1ZXN0PFQgZXh0ZW5kcyBrZXlvZiBSZXF1ZXN0UmVwbHlNYXA+KFxuICAgIHJlcXVlc3Q6IFQsXG4gICAgYXJnczogeyBbSyBpbiBFeGNsdWRlPGtleW9mIENoYW5uZWxNYXBbVF0sICdpZCc+XTogQ2hhbm5lbE1hcFtUXVtLXSB9LFxuICApIHtcbiAgICBjb25zdCBpZCA9IHRoaXMucmVwbHlDYWxsYmFja0lkKytcbiAgICByZXR1cm4gbmV3IFByb21pc2U8UmVxdWVzdFJlcGx5TWFwW1RdPigocmVzb2x2ZSkgPT4ge1xuICAgICAgdGhpcy5yZXBseUNhbGxiYWNrcy5zZXQoaWQsICh7XG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICAgIGNhbGxiYWNrOiAocmVzdWx0OiBSZXF1ZXN0UmVwbHlNYXBbVF0pID0+IHtcbiAgICAgICAgICB0aGlzLnJlcGx5Q2FsbGJhY2tzLmRlbGV0ZShpZClcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdClcbiAgICAgICAgfSxcbiAgICAgIH0gYXMgdW5rbm93bikgYXMgUmVwbHlDYWxsYmFja1N0cnVjdDxUPilcbiAgICAgIGNvbnN0IG5ld2FyZ3MgPSBPYmplY3QuYXNzaWduKHsgaWQgfSwgYXJncylcbiAgICAgIHRoaXMuX2VsZW1lbnQuc2VuZDxUPihyZXF1ZXN0LCBuZXdhcmdzIGFzIENoYW5uZWxNYXBbVF0pXG4gICAgfSlcbiAgfVxufVxuIl19